/**
 * Iron Manus MCP Core Types
 *
 * This module defines the core type system for the Iron Manus Model Context Protocol (MCP) server.
 * It implements Manus's 8-phase agent loop with fractal orchestration, supporting Component-Cognitive
 * Duality for both UI generation (V0-style) and cognitive orchestration.
 *
 * Architecture:
 * - 8-phase FSM: INIT → QUERY → ENHANCE → KNOWLEDGE → PLAN → EXECUTE → VERIFY → DONE
 * - Role-based cognitive enhancement with 9 specialized roles
 * - Tool registry with intelligent orchestration
 * - Knowledge graph state management
 * - API registry with 65+ integrated APIs
 */

/**
 * FSM Phase enumeration representing the 8-phase agent loop
 *
 * Maps directly to Manus's cognitive architecture:
 * - INIT: Session initialization and role detection
 * - QUERY: Analyze events and understand objectives (Manus: "Analyze Events")
 * - ENHANCE: Select tools and enhance capabilities (Manus: "Select Tools")
 * - KNOWLEDGE: Knowledge acquisition and synthesis (Manus: "Wait for Execution", Knowledge Module)
 * - PLAN: Strategic planning and task decomposition (Manus: "Iterate", Planner Module)
 * - EXECUTE: Implementation and execution (Manus: "Submit Results", Datasource Module)
 * - VERIFY: Quality verification and validation
 * - DONE: Session completion and standby (Manus: "Enter Standby")
 */
export type Phase =
  | 'INIT'
  | 'QUERY' // Manus: "Analyze Events"
  | 'ENHANCE' // Manus: "Select Tools"
  | 'KNOWLEDGE' // Manus: "Wait for Execution" (Knowledge Module)
  | 'PLAN' // Manus: "Iterate" (Planner Module)
  | 'EXECUTE' // Manus: "Submit Results" (Datasource Module)
  | 'VERIFY' // Quality check
  | 'DONE'; // Manus: "Enter Standby"

/**
 * Role enumeration for cognitive enhancement and specialization
 *
 * Each role provides specialized cognitive capabilities and thinking methodologies:
 * - planner: Strategic planning and task decomposition (maps to Manus Planner Module)
 * - coder: Implementation, development, and technical execution
 * - critic: Quality assessment, security analysis, and code review
 * - researcher: Knowledge acquisition and synthesis (maps to Manus Knowledge Module)
 * - analyzer: Data analysis, insights extraction, and pattern recognition
 * - synthesizer: Integration, optimization, and system coherence
 * - ui_architect: V0-style UI architecture and systematic design patterns
 * - ui_implementer: V0-style UI implementation with concurrent execution
 * - ui_refiner: V0-style UI refinement with polished aesthetics and UX optimization
 * - slide_generator: Unified presentation slide generation with template-based specialization
 *
 * Roles are auto-detected from objectives and enhance reasoning effectiveness through
 * specialized thinking methodologies and cognitive frameworks.
 */
export type Role =
  | 'planner' // Maps to Manus Planner Module
  | 'coder' // Implementation and development
  | 'critic' // Quality assessment and security
  | 'researcher' // Maps to Manus Knowledge Module
  | 'analyzer' // Data analysis and insights
  | 'synthesizer' // Integration and optimization
  | 'ui_architect' // V0-Style UI architecture and systematic design
  | 'ui_implementer' // V0-Style UI implementation with concurrent execution
  | 'ui_refiner' // V0-Style UI refinement with polished aesthetics
  | 'slide_generator'; // Unified presentation slide generation with template-based specialization

/**
 * Complexity level enumeration for validation and processing
 *
 * Used to categorize tasks, objectives, and system requirements:
 * - SIMPLE: Basic tasks with minimal dependencies
 * - MODERATE: Multi-step tasks requiring coordination
 * - COMPLEX: Advanced tasks with multiple phases and tools
 * - ENTERPRISE: Large-scale systems with comprehensive requirements
 *
 * Affects tool selection, validation rules, and cognitive enhancement strategies.
 */
export enum ComplexityLevel {
  SIMPLE = 'simple',
  MODERATE = 'moderate',
  COMPLEX = 'complex',
  ENTERPRISE = 'enterprise',
}

/**
 * Security level enumeration for AST validation and content filtering
 *
 * Defines security classifications for code analysis and validation:
 * - TRUSTED: Fully trusted content with no restrictions
 * - SAFE: Safe content that passed all security checks
 * - RESTRICTED: Content with limitations requiring careful handling
 * - BLOCKED: Content that violates security policies and is blocked
 *
 * Used by the AST parser and validation engine to ensure safe code execution.
 */
export enum SecurityLevel {
  TRUSTED = 'TRUSTED',
  SAFE = 'SAFE',
  RESTRICTED = 'RESTRICTED',
  BLOCKED = 'BLOCKED',
}

/**
 * Deliverable type enumeration for output validation and categorization
 *
 * Classifies different types of outputs generated by the system:
 * - CODE: Source code, scripts, and executable content
 * - DOCUMENTATION: Technical documentation, API docs, and guides
 * - ANALYSIS: Data analysis, insights, and research findings
 * - PLAN: Strategic plans, project roadmaps, and task breakdowns
 * - IMPLEMENTATION: Implementation details and technical specifications
 * - REVIEW: Code reviews, quality assessments, and critiques
 * - TESTING: Test cases, validation procedures, and quality assurance
 * - DEPLOYMENT: Deployment configurations and production artifacts
 *
 * Used for output validation, formatting, and quality control.
 */
export enum DeliverableType {
  CODE = 'CODE',
  DOCUMENTATION = 'DOCUMENTATION',
  ANALYSIS = 'ANALYSIS',
  PLAN = 'PLAN',
  IMPLEMENTATION = 'IMPLEMENTATION',
  REVIEW = 'REVIEW',
  TESTING = 'TESTING',
  DEPLOYMENT = 'DEPLOYMENT',
}

/**
 * Parse error interface for AST validation and syntax analysis
 *
 * Represents errors encountered during parsing and validation:
 * - message: Human-readable error description
 * - position: Source location with start/end positions and line/column numbers
 * - severity: Error severity level (error, warning, info)
 * - code: Error code for programmatic identification
 * - suggestions: Suggested fixes or improvements
 *
 * Used by the validation engine to provide detailed error feedback.
 */
export interface ParseError {
  message: string;
  position: { start: number; end: number; line: number; column: number };
  severity: 'error' | 'warning' | 'info';
  code: string;
  suggestions: string[];
}

/**
 * Parse warning interface for non-critical validation issues
 *
 * Represents warnings encountered during parsing that don't prevent execution:
 * - message: Human-readable warning description
 * - position: Source location with start/end positions and line/column numbers
 * - code: Warning code for programmatic identification
 *
 * Used to communicate potential issues that should be reviewed but don't block processing.
 */
export interface ParseWarning {
  message: string;
  position: { start: number; end: number; line: number; column: number };
  code: string;
}

/**
 * Inferred type enumeration for semantic analysis and context understanding
 *
 * Types inferred during AST analysis and content parsing:
 * - ROLE_REFERENCE: References to specific roles or agents
 * - DOMAIN_CONTEXT: Domain-specific context and terminology
 * - INSTRUCTION_SET: Sets of instructions or commands
 * - DELIVERABLE_SPEC: Specifications for expected deliverables
 * - PARAMETER_VALUE: Parameter values and configuration data
 *
 * Used for semantic analysis and intelligent content processing.
 */
export enum InferredType {
  ROLE_REFERENCE = 'ROLE_REFERENCE',
  DOMAIN_CONTEXT = 'DOMAIN_CONTEXT',
  INSTRUCTION_SET = 'INSTRUCTION_SET',
  DELIVERABLE_SPEC = 'DELIVERABLE_SPEC',
  PARAMETER_VALUE = 'PARAMETER_VALUE',
}

/**
 * Validation result interface for comprehensive content validation
 *
 * Contains complete validation results with errors, warnings, and metadata:
 * - isValid: Overall validation status
 * - errors: Array of parse errors encountered
 * - warnings: Array of warnings that don't block execution
 * - securityLevel: Determined security classification
 * - inferredTypes: Map of inferred semantic types
 * - metadata: Validation performance metrics and applied rules
 *
 * Used by the validation engine to provide comprehensive feedback on content quality and safety.
 */
export interface ValidationResult {
  isValid: boolean;
  errors: ParseError[];
  warnings: ParseWarning[];
  securityLevel: SecurityLevel;
  inferredTypes: Map<string, InferredType>;
  metadata: {
    validationTimeMs: number;
    rulesApplied: string[];
  };
}

/**
 * Abstract Syntax Tree (AST) node interface for code parsing and analysis
 *
 * Represents a single node in the parsed AST:
 * - type: Node type identifier
 * - value: Optional node value or content
 * - children: Array of child nodes
 * - position: Source position information
 * - metadata: Additional node metadata including raw content, validation status, and security level
 *
 * Used by the AST parser for code analysis, validation, and transformation.
 */
export interface ASTNode {
  type: string;
  value?: string;
  children: ASTNode[];
  position: { start: number; end: number; line: number; column: number };
  metadata: {
    raw: string;
    validated: boolean;
    securityLevel: SecurityLevel;
  };
}

/**
 * Meta-prompt structure for fractal orchestration and Task() agent spawning
 *
 * Enables Level 1 → Level 2 → Level 3 fractal orchestration where the FSM controller
 * spawns specialized Task() agents with complete context and instructions. This interface
 * defines the structured prompt format used for agent communication in the 8-phase loop.
 *
 * Architecture Integration:
 * - Used by JARVIS FSM controller to spawn Task() agents during PLAN and EXECUTE phases
 * - Enables fractal task decomposition with full context preservation
 * - Supports role-based cognitive enhancement through structured prompts
 * - Integrates with Component-Cognitive Duality for both UI generation and cognitive orchestration
 *
 * @example
 * ```typescript
 * const metaPrompt: MetaPrompt = {
 *   role_specification: "ROLE: ui_architect",
 *   context_parameters: {
 *     framework: "React",
 *     styling: "Tailwind CSS",
 *     complexity: "moderate"
 *   },
 *   instruction_block: "PROMPT: Create responsive navigation component with accessibility features",
 *   output_requirements: "OUTPUT: React component with TypeScript, ARIA labels, and mobile-first design"
 * };
 * ```
 */
export interface MetaPrompt {
  /** Role specification for the target agent (format: "ROLE: agent_type") */
  role_specification: string;
  /** Context parameters providing domain-specific information and constraints */
  context_parameters: Record<string, unknown>;
  /** Detailed instruction block with specific task requirements (format: "PROMPT: detailed_instructions") */
  instruction_block: string;
  /** Output requirements specifying expected deliverables (format: "OUTPUT: specific_deliverables") */
  output_requirements: string;
}

/**
 * Enhanced TodoItem interface supporting fractal orchestration and Component-Cognitive Duality
 *
 * Represents individual tasks within the 8-phase FSM loop, with support for nested Task() agent
 * spawning and dual-mode operation (UI generation + cognitive orchestration). Each TodoItem can
 * trigger fractal decomposition into specialized sub-agents.
 *
 * Fractal Orchestration:
 * - TaskAgent: Spawns dedicated Task() agent with MetaPrompt
 * - SubAgent: Creates nested sub-agent for complex operations
 * - DirectExecution: Executes task directly without agent spawning
 *
 * Component-Cognitive Duality:
 * - ui-generation: V0-style component generation with constraints
 * - cognitive-orchestration: Manus-style cognitive processing
 * - unified: Hybrid mode combining both approaches
 *
 * @example
 * ```typescript
 * const complexUITask: TodoItem = {
 *   id: "nav-component-001",
 *   content: "Create responsive navigation component",
 *   status: "pending",
 *   priority: "high",
 *   type: "TaskAgent",
 *   meta_prompt: {
 *     role_specification: "ROLE: ui_architect",
 *     context_parameters: { framework: "React", styling: "Tailwind" },
 *     instruction_block: "PROMPT: Build accessible navigation",
 *     output_requirements: "OUTPUT: React component with TypeScript"
 *   },
 *   duality_mode: "ui-generation",
 *   constraint_level: "component"
 * };
 * ```
 */
export interface TodoItem {
  /** Unique identifier for the task */
  id: string;
  /** Human-readable task description */
  content: string;
  /** Current execution status of the task */
  status: 'pending' | 'in_progress' | 'completed';
  /** Task priority level affecting execution order */
  priority: 'high' | 'medium' | 'low';
  /** Fractal orchestration level indicator determining execution strategy */
  type?: 'TaskAgent' | 'SubAgent' | 'DirectExecution';
  /** MetaPrompt for Task() agent spawning when type is TaskAgent or SubAgent */
  meta_prompt?: MetaPrompt;

  // Component-Cognitive Duality Extensions
  /** Duality operation mode determining processing approach */
  duality_mode?: 'ui-generation' | 'cognitive-orchestration' | 'unified';
  /** V0 component correspondence for UI generation tasks */
  component_mapping?: ComponentTaskMapping;
  /** Constraint enforcement level within the system hierarchy */
  constraint_level?: 'atomic' | 'component' | 'phase' | 'session';
}

// V0 Component mapping for duality support (moved to ComponentCognitiveDuality structure)

/**
 * Message interface for communication with JARVIS FSM controller
 *
 * Defines the input message structure for the 8-phase agent loop coordination.
 * JARVIS processes these messages to orchestrate phase transitions, role detection,
 * and cognitive enhancement throughout the session lifecycle.
 *
 * Message Flow:
 * 1. Initial call: Includes session_id and initial_objective
 * 2. Phase transitions: Includes phase_completed and payload
 * 3. Event stream simulation: Payload contains phase-specific data
 *
 * @example
 * ```typescript
 * // Initial session start
 * const initMessage: MessageJARVIS = {
 *   session_id: "session_123",
 *   initial_objective: "Build responsive e-commerce dashboard"
 * };
 *
 * // Phase transition
 * const phaseMessage: MessageJARVIS = {
 *   session_id: "session_123",
 *   phase_completed: "KNOWLEDGE",
 *   payload: {
 *     apis_discovered: 5,
 *     synthesis_confidence: 0.85,
 *     next_actions: ["implement_dashboard", "setup_routing"]
 *   }
 * };
 * ```
 */
export interface MessageJARVIS {
  /** Unique session identifier for state isolation and tracking */
  session_id: string;
  /** Phase that was just completed (omitted for initial session calls) */
  phase_completed?: Phase;
  /** User's initial objective (required only on first call for role detection) */
  initial_objective?: string;
  /** Phase-specific data payload simulating event stream communication */
  payload?: Record<string, unknown>;
}

/**
 * Response interface from JARVIS FSM controller
 *
 * Defines the output structure from the 8-phase agent loop coordinator, providing
 * enhanced system prompts, tool gating, and phase transition instructions. This
 * interface enables controlled, single-tool-per-iteration execution with cognitive enhancement.
 *
 * Response Components:
 * - next_phase: Orchestrates FSM state transitions
 * - system_prompt: Role-enhanced cognitive prompts
 * - allowed_next_tools: Enforces tool usage constraints
 * - payload: Event stream data for next phase
 * - status: Session execution status
 *
 * Tool Gating:
 * The allowed_next_tools array enforces "single tool per iteration" constraints,
 * preventing tool misuse and ensuring controlled execution flow.
 *
 * @example
 * ```typescript
 * const response: FromJARVIS = {
 *   next_phase: "EXECUTE",
 *   system_prompt: "You are a ui_architect. Focus on component creation with accessibility...",
 *   allowed_next_tools: ["WebSearch", "PythonComputationalTool"],
 *   payload: {
 *     current_todos: [...],
 *     detected_apis: [...],
 *     reasoning_context: "..."
 *   },
 *   status: "IN_PROGRESS"
 * };
 * ```
 */
export interface FromJARVIS {
  /** Next phase in the 8-phase FSM loop */
  next_phase: Phase;
  /** Role-enhanced, cognitively augmented system prompt for the next phase */
  system_prompt: string;
  /** Tool gating array enforcing "single tool per iteration" constraints */
  allowed_next_tools: string[];
  /** Event stream data payload for the next phase execution */
  payload?: Record<string, unknown>;
  /** Current session execution status */
  status: 'IN_PROGRESS' | 'DONE' | 'ERROR';
}

/**
 * Role configuration interface for cognitive enhancement and specialization
 *
 * Defines the cognitive capabilities, thinking methodologies, and specialized frameworks
 * for each of the 9 roles in the system. This configuration enables role-based cognitive
 * enhancement that improves reasoning effectiveness and task-specific performance.
 *
 * Cognitive Enhancement:
 * - Provides explicit thinking methodologies for quality reasoning
 * - Defines role-specific validation rules and frameworks
 * - Establishes authority levels for different cognitive domains
 * - Supports optional cognitive frameworks for advanced reasoning
 *
 * Role Specialization:
 * Each role (planner, coder, critic, etc.) has tailored configurations that enhance
 * performance in specific domains while maintaining system coherence.
 *
 * @example
 * ```typescript
 * const uiArchitectConfig: RoleConfig = {
 *   defaultOutput: "React component with TypeScript and accessibility features",
 *   focus: "Component architecture and systematic design patterns",
 *   complexityLevel: "complex",
 *   suggestedFrameworks: ["React", "TypeScript", "Tailwind CSS"],
 *   validationRules: ["WCAG compliance", "responsive design", "type safety"],
 *   thinkingMethodology: [
 *     "Analyze component requirements",
 *     "Design component hierarchy",
 *     "Implement accessibility features",
 *     "Validate responsive behavior"
 *   ],
 *   authorityLevel: "component_architecture",
 *   cognitiveFrameworks: ["design_systems", "accessibility_guidelines"]
 * };
 * ```
 */
export interface RoleConfig {
  /** Default output format and structure for the role */
  defaultOutput: string;
  /** Primary focus area and cognitive domain */
  focus: string;
  /** Complexity level the role is optimized to handle */
  complexityLevel: 'simple' | 'multi-step' | 'complex';
  /** Suggested frameworks and tools for the role */
  suggestedFrameworks: string[];
  /** Validation rules and quality standards for the role */
  validationRules: string[];
  /** Explicit thinking steps for quality reasoning and cognitive enhancement */
  thinkingMethodology: string[];
  /** Authority level and decision-making scope for the role */
  authorityLevel: string;
  /** Optional cognitive frameworks for advanced reasoning capabilities */
  cognitiveFrameworks?: string[];
}

/**
 * Session state interface for FSM state management and duality operations
 *
 * Maintains the complete state of an 8-phase FSM session, including current phase,
 * role detection, performance metrics, and Component-Cognitive Duality extensions.
 * This interface enables comprehensive session tracking and cross-mode operations.
 *
 * Core State Management:
 * - Tracks current phase in the 8-phase loop (INIT → QUERY → ENHANCE → KNOWLEDGE → PLAN → EXECUTE → VERIFY → DONE)
 * - Maintains role detection results for cognitive enhancement
 * - Manages event stream simulation through payload
 * - Tracks reasoning effectiveness and performance metrics
 *
 * Component-Cognitive Duality:
 * - ui-generation: V0-style component generation with constraints
 * - cognitive-orchestration: Manus-style cognitive processing
 * - unified: Hybrid mode combining both approaches
 *
 * Performance Tracking:
 * - reasoning_effectiveness: Measures cognitive performance (0-1 scale)
 * - performance_metrics: Detailed cross-mode performance data
 * - last_activity: Timestamp for session management
 *
 * @example
 * ```typescript
 * const sessionState: SessionState = {
 *   current_phase: "EXECUTE",
 *   initial_objective: "Build responsive e-commerce dashboard",
 *   detected_role: "ui_architect",
 *   payload: {
 *     current_task_index: 2,
 *     current_todos: [...],
 *     apis_discovered: 5,
 *     synthesis_confidence: 0.85
 *   },
 *   reasoning_effectiveness: 0.92,
 *   last_activity: Date.now(),
 *   duality_mode: "unified",
 *   performance_metrics: {
 *     cognitiveEffectiveness: 0.88,
 *     componentGenerationSpeed: 3.2,
 *     phaseTransitionEfficiency: 0.94,
 *     systemCoherence: 0.89
 *   }
 * };
 * ```
 */
export interface SessionState {
  /** Current phase in the 8-phase FSM loop */
  current_phase: Phase;
  /** User's initial objective used for role detection and context */
  initial_objective: string;
  /** Auto-detected role from initial_objective for cognitive enhancement */
  detected_role: Role;
  /** Event stream simulation payload containing current task state and phase data */
  payload: Record<string, unknown> & {
    // Parallel slide execution tracking fields
    parallel_slide_execution_started?: boolean;
    slide_tasks_pending?: number;
    slide_tasks_completed?: number;
    parallel_slide_tasks?: TodoItem[];
    remaining_regular_tasks?: TodoItem[];
  };
  /** Performance tracking metric for reasoning effectiveness (0-1 scale) */
  reasoning_effectiveness: number;
  /** Timestamp of last session activity for state management */
  last_activity: number;

  // Component-Cognitive Duality Extensions
  /** Duality operation mode determining processing approach */
  duality_mode?: 'ui-generation' | 'cognitive-orchestration' | 'unified';
  /** V0 ecosystem correspondence for session-level duality operations */
  ecosystem_mapping?: EcosystemSessionMapping;
  /** Cross-mode performance tracking and optimization metrics */
  performance_metrics?: DualityPerformanceMetrics;

  // Presentation Pipeline Extensions
  /** Presentation mode flag indicating specialized pipeline is active */
  presentation_mode?: boolean;
  /** Detailed slide outline for presentation structure */
  slide_outline?: SlideOutline[];
  /** Presentation project directory path */
  presentation_directory?: string;
  /** Batch execution plan for parallelized slide generation */
  batch_execution_plan?: BatchExecutionPlan;
  /** Presentation assets tracking (images, diagrams, etc.) */
  presentation_assets?: PresentationAssets;
}

// V0 Ecosystem mapping for session-level duality
export interface EcosystemSessionMapping {
  ecosystemName?: string; // Vercel deployment name
  deploymentStrategy?: string; // Production, preview, etc.
  projectPortfolio?: ProjectPhaseMapping[]; // Active projects
  integrationServices?: string[]; // External APIs, databases
  coherenceMode?: 'unified' | 'isolated'; // Cross-system consistency
}

// Project-Phase level mapping (legacy - moved to extracted ProjectPhaseMapping)

// Performance metrics for duality operations
export interface DualityPerformanceMetrics {
  cognitiveEffectiveness: number; // Thinking methodology effectiveness
  componentGenerationSpeed?: number; // Components/minute (UI mode)
  phaseTransitionEfficiency: number; // Successful transitions/total
  systemCoherence: number; // Cross-mode consistency (0-1)
  dualityUtilization: number; // % time in unified mode
  modeSwitch_frequency: number; // Switches per session
  modeSwitch_latency: number; // Average switch time (ms)
}

// ================================
// PRESENTATION PIPELINE TYPES
// Supporting types for presentation-focused workflows
// ================================

/** Individual slide specification in presentation outline */
export interface SlideOutline {
  /** Slide number in sequence */
  slide_number: number;
  /** Slide title */
  title: string;
  /** Slide content description */
  description: string;
  /** Content type for template selection */
  content_type: 'title' | 'agenda' | 'intro' | 'content' | 'diagram' | 'conclusion';
  /** Visual requirements (charts, images, etc.) */
  visual_requirements?: string[];
  /** Batch group assignment for parallel execution */
  batch_group?: number;
}

/** Batch execution plan for parallelized presentation generation */
export interface BatchExecutionPlan {
  /** Total number of slides to generate */
  total_slides: number;
  /** Batch groupings for parallel execution */
  batch_groups: BatchGroup[];
  /** Asset preparation tasks */
  asset_tasks: string[];
  /** Setup tasks (directory creation, etc.) */
  setup_tasks: string[];
}

/** Individual batch group for parallel slide generation */
export interface BatchGroup {
  /** Batch identifier */
  batch_id: number;
  /** Slide numbers in this batch */
  slide_numbers: number[];
  /** Batch description */
  description: string;
  /** Estimated execution time */
  estimated_time?: number;
}

/** Presentation assets tracking */
export interface PresentationAssets {
  /** Project directory path */
  project_directory: string;
  /** Image assets and their paths */
  images: { [key: string]: string };
  /** Generated diagrams */
  diagrams: { [key: string]: string };
  /** Custom assets */
  custom_assets: { [key: string]: string };
  /** Asset status tracking */
  asset_status: { [key: string]: 'pending' | 'downloaded' | 'generated' | 'ready' };
}

// ================================
// COMPONENT-COGNITIVE DUALITY STATE TYPES
// Supporting types for enhanced session management
// ================================

// ComponentCognitiveDuality moved to later in file with proper structure

// Extracted component task mapping interface
export interface ComponentTaskMapping {
  component_id: string;
  task_objective: string;
  constraint_hierarchy: UnifiedConstraint[];
  generation_pattern: 'atomic' | 'composite' | 'ecosystem';
  cognitive_enhancement: number;
}

// Extracted project phase mapping interface
export interface ProjectPhaseMapping {
  project_scope: string;
  phase_sequence: Phase[];
  constraint_propagation: UnifiedConstraint[];
  integration_patterns: string[];
  orchestration_mode: 'sequential' | 'parallel' | 'fractal';
}

// Extracted ecosystem session mapping interface
export interface EcosystemSessionMapping {
  ecosystem_context: Record<string, unknown>;
  session_state: SessionState;
  global_constraints: UnifiedConstraint[];
  encapsulation_patterns: EncapsulationPattern[];
  cognitive_context: CognitiveContext;
}

export interface BaseConstraint {
  id: string;
  type: 'access' | 'mutation' | 'communication' | 'resource' | 'validation';
  scope: 'component' | 'project' | 'ecosystem' | 'phase' | 'session';
  rule: string;
  enforcement: 'error' | 'warning' | 'log';
  priority: number;
}

export interface EncapsulationPattern {
  pattern_name: string;
  isolation_level: 'strict' | 'permeable' | 'transparent';
  boundary_definition: string;
  interaction_protocols: string[];
  resource_limits: ResourceLimits;
}

export interface ResourceLimits {
  memory?: number;
  cpu?: number;
  network?: number;
  storage?: number;
}

export interface CognitiveContext {
  reasoning_mode:
    | 'hybrid_duality'
    | 'component_focused'
    | 'cognitive_focused'
    | 'unified'
    | 'component_generation'
    | 'cognitive_orchestration';
  framework_selection: string[];
  constraint_resolution: 'strict' | 'adaptive' | 'permissive' | 'flexible';
  performance_metrics: ComponentCognitiveMetrics;
  duality_effectiveness: number;
}

export interface ComponentCognitiveMetrics {
  component_generation: {
    generation_speed: number;
    constraint_satisfaction: number;
    accessibility_score: number;
    reusability_index: number;
  };
  cognitive_orchestration: {
    reasoning_effectiveness: number;
    phase_transition_efficiency: number;
    task_completion_rate: number;
    fractal_orchestration_depth: number;
  };
  duality_synergy: {
    integration_coherence: number;
    constraint_unification: number;
    cross_domain_efficiency: number;
    architectural_elegance: number;
  };
}

// Enhanced verification result with strict completion metrics
export interface VerificationResult {
  isValid: boolean;
  completionPercentage: number;
  reason: string;
  criticalTasksCompleted: number;
  totalCriticalTasks: number;
  taskBreakdown: {
    completed: number;
    in_progress: number;
    pending: number;
    total: number;
  };
}

// API usage metrics for tracking API discovery and utilization
export interface APIUsageMetrics {
  apis_discovered: number;
  apis_queried: number;
  synthesis_confidence: number;
  processing_time: number;
  discovery_success_rate?: number;
  api_response_time?: number;
  knowledge_synthesis_quality?: number;
}

// ============================================================================
// COMPONENT-COGNITIVE DUALITY MAPPING
// Unified constraint hierarchy bridging V0's Component→Project→Ecosystem
// with Manus Task→Phase→Session patterns
// ============================================================================

// V0-inspired constraint types for component generation domain
export type ComponentConstraintType =
  | 'framework' // React, Vue, Svelte constraints
  | 'styling' // Tailwind, Material UI, Chakra UI constraints
  | 'accessibility' // WAI-ARIA, WCAG compliance constraints
  | 'integration' // Third-party library integration constraints
  | 'architecture' // Component composition and hierarchy constraints
  | 'performance'; // Optimization and bundle size constraints

// Unified constraint hierarchy interface
export interface UnifiedConstraint {
  id: string;
  type: ComponentConstraintType;
  scope: 'component' | 'project' | 'ecosystem'; // V0 hierarchy levels
  cognitive_phase: Phase; // Manus phase mapping
  constraint_value: unknown; // Flexible constraint data
  priority: 'critical' | 'high' | 'medium' | 'low';
  validation_rules: string[]; // Constraint validation logic
  dependency_graph: string[]; // Inter-constraint dependencies
}

// Component-Cognitive duality mapping structure
export interface ComponentCognitiveDuality {
  // V0 Component ↔ Manus Task mapping
  component_task_mapping: ComponentTaskMapping;

  // V0 Project ↔ Manus Phase mapping
  project_phase_mapping: ProjectPhaseMapping;

  // V0 Ecosystem ↔ Manus Session mapping
  ecosystem_session_mapping: EcosystemSessionMapping;
}

// V0 encapsulation patterns for integration
export interface EncapsulationPattern {
  pattern_type:
    | 'functional_component'
    | 'custom_hook'
    | 'context_provider'
    | 'higher_order_component';
  scope_isolation: boolean; // Component scope isolation
  state_management: 'local' | 'context' | 'external'; // State encapsulation
  props_interface: Record<string, unknown>; // Component API definition
  side_effect_management: string[]; // Hook and effect patterns
  constraint_enforcement: UnifiedConstraint[]; // Pattern-specific constraints
}

// Enhanced cognitive context for component-cognitive duality (merged definition)

// Unified performance metrics for both domains
export interface ComponentCognitiveMetrics {
  component_generation: {
    generation_speed: number; // Components per second
    constraint_satisfaction: number; // Constraint compliance percentage
    accessibility_score: number; // WCAG compliance score
    reusability_index: number; // Component reuse potential
  };
  cognitive_orchestration: {
    reasoning_effectiveness: number; // Manus reasoning effectiveness
    phase_transition_efficiency: number; // Phase completion speed
    task_completion_rate: number; // Task success percentage
    fractal_orchestration_depth: number; // Nested Task() agent levels
  };
  duality_synergy: {
    integration_coherence: number; // System coherence score
    constraint_unification: number; // Unified constraint effectiveness
    cross_domain_efficiency: number; // Inter-domain operation efficiency
    architectural_elegance: number; // Overall system design quality
  };
}
